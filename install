#!/bin/bash

if [[ $OSTYPE == darwin* ]]; then
    OS='mac'
elif [[ $OSTYPE == linux-gnu* ]]; then
    OS='linux'
else
    OS='unknown'
fi

DISTROSTR=`lsb_release -i | cut -f 2-`

if [[ $OS == "linux" ]]; then
  if [[ $DISTROSTR == "ManjaroLinux" ]]; then
    DISTRO="manjaro"
  else
    DISTRO="ubuntu"
  fi
fi

echo "updating package lists"
if [[ $OS == "linux"* ]]; then
  if [[ $DISTRO = "manjaro" ]]; then
    sudo pacman-mirrors --fasttrack && sudo pacman -Syyu
  else
    sudo apt-get update
  fi
fi

if [[ $OS == "mac"* ]]; then
  echo "installing brew, tmux, ripgrep, starship, grc, ani-cli"
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  brew cask install iterm2
  brew install tmux
  brew install ripgrep
  brew install starship
  brew install grc
  brew install httpie
  brew install curl grep aria2 mpv openssl@1.1 ffmpeg git
elif [[ $OS == "linux"* ]]; then
  echo "installing tmux, ripgrep, starship, grc, ani-cli"
  if [[ $DISTRO = "manjaro" ]]; then
    sudo pamac install tmux
    sudo pamac install httpie
  else
    sudo apt-get install tmux
    sudo apt-get install grc
    sudo apt-get install httpie
  fi
  sudo chmod +x ./rg
  sudo cp ./rg /usr/local/bin/rg
  curl -sS https://starship.rs/install.sh | sh
  sudo apt-get install mpv
  sudo apt-get install aria2
  sudo curl -sL github.com/pystardust/ani-cli/raw/master/ani-cli -o /usr/local/bin/ani-cli &&
  sudo chmod +x /usr/local/bin/ani-cli
fi

echo "installing vim, puush"
if [[ $OS == "linux" ]]; then
  if [[ $DISTRO = "manjaro" ]]; then
    sudo pamac install vim
    sudo pamac install xclip
    sudo pamac install libnotify-bin
  else
    sudo apt-get install vim
    sudo apt-get install xclip
    sudo apt-get install libnotify-bin
  fi
fi
# add API key to puush file
sudo chmod +x ./puush
sudo cp ./puush /usr/local/bin/puush

echo "installing ripgrep, fzf"
sudo chmod +x ./fzf
sudo cp ./fzf /usr/local/bin/fzf
echo "copying vim, tmux, bash, git config"
sudo cp ./.vimrc ~/.vimrc
sudo cp ./.tmux.conf ~/.tmux.conf
sudo cp ./.tmux.conf.local ~/.tmux.conf.local
sudo cp ./.terminal-config-cross-platform ~/.terminal-config-cross-platform
cat ./.bashrc >> ~/.bashrc
sudo cp ./.gitconfig ~/.gitconfig
sudo cp ./.gitignore_global ~/.gitignore_global

if [[ $OS == "linux" ]]; then
  echo "installing pipx, docker, linux for now"
  if [[ $DISTRO = "manjaro" ]]; then
    sudo pamac install docker
    sudo systemctl start docker
    sudo systemctl enable docker
  else
    sudo apt-get install python3-venv
    sudo apt-get install python3-pip
    sudo apt-get update
    sudo apt-get install ca-certificates curl gnupg lsb-release
    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update
    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
  fi
  sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  sudo groupadd docker
  sudo usermod -aG docker $USER
  sudo gpasswd -a $USER docker
  newgrp docker
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
  source ~/.bashrc
  pipx install black
  pipx install isort
  pipx install pre-commit
fi

echo "installing nvm, node, gulp, prettier, localtunnel"
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
source ~/.bashrc
nvm install node
nvm use node
npm install -g babel-cli gulp gulp-cli prettier localtunnel

echo "couple tweaks"
echo fs.inotify.max_user_watches=16384 | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

if [[ $OS == "linux" ]]; then
  echo "battle.net dependencies"
  if [[ $DISTRO = "manjaro" ]]; then
    pamac install lib32-gnutl
  fi
fi

# system-specific
# sudo echo "### turn off timer-based scheduling" >> /etc/pulse/default.pa
# sudo echo "load-module module-udev-detect tsched=0" >> /etc/pulse/default.pa

echo "finish!"
